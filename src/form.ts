import {
  ErrorText,
  FormItem,
  FormItemsData,
  FormOptions,
  Pristine,
  TupleToUnion,
  Valid,
} from './type'
import { clearValidateRes, init, itemValidate } from './utils'

export class Form<
  FormItems extends FormItem<any, any, any>[],
  FormDataType extends FormItemsData<FormItems>,
  ReturnTypeOfSubmit extends any
> {
  private readonly options: Required<
    FormOptions<FormDataType, ReturnTypeOfSubmit | FormDataType>
  > = {} as any

  /**
   * @desc 表单项数组
   *
   * @desc Array of form items
   * */
  items!: Array<
    FormItem<
      TupleToUnion<FormItems, 'value'>,
      TupleToUnion<FormItems, 'field'>,
      TupleToUnion<FormItems, 'id'> | TupleToUnion<FormItems, 'field'>
    > & {
      id: TupleToUnion<FormItems, 'id'> | TupleToUnion<FormItems, 'field'>
      required: boolean
      pristine: Pristine
      valid: Valid
      errorText: string
    }
  >

  /**
   * @desc 当前表单数据，由表单项数组生成
   *
   * @desc Data of the form, generated by form items
   * */
  get data(): FormDataType {
    return this.items.reduce(
      (data, item) => ({ ...data, [item.field]: item.value }),
      {} as FormDataType,
    )
  }

  get pristine(): Pristine {
    return this.items.every(item => item.pristine)
  }

  get valid(): Valid {
    return this.items.every(item => item.valid)
  }

  /**
   * @desc 当前表单应该显示的错误信息
   *
   * @desc The current errorText of the form
   * */
  get errorText(): ErrorText {
    const item = this.items.find($item => $item.errorText)
    return item ? item.errorText : ''
  }

  constructor(
    formItems: FormItems,
    options: FormOptions<FormDataType, ReturnTypeOfSubmit | FormDataType> = {},
  ) {
    this.updateOptions(options)
    this.items = init(formItems, this.options)
  }

  getItemByField(field: TupleToUnion<FormItems, 'field'>) {
    return this.items.find(item => item.field === field)
  }

  getItemById(
    id: TupleToUnion<FormItems, 'id'> | TupleToUnion<FormItems, 'field'>,
  ) {
    return this.items.find(item => item.id === id)
  }

  /**
   * @desc 更新与参数 field 对应的表单项的值
   *
   * @desc Update the value of the form item that matched the param `field`
   * */
  itemChange(
    field: TupleToUnion<FormItems, 'field'>,
    value: TupleToUnion<FormItems, 'value'>,
  ): void {
    const item = this.getItemByField(field)
    if (item) {
      item.value = item.formatter
        ? item.formatter(value, this.options.optionsForValidatorAndFormatter)
        : value

      const { validateOnChange = this.options.validateOnChange } = item
      if (validateOnChange) itemValidate(item, this.options)
      else item.pristine = false
    } else console.error("Form: The field isn't exist in this form")
  }

  /**
   * @desc 校验与参数 field 对应的表单项
   *
   * @desc Validate the value of the form item that matched the param `field`
   * */
  itemValidate(field: TupleToUnion<FormItems, 'field'>): ErrorText {
    const item = this.getItemByField(field)
    if (item) return itemValidate(item, this.options)
    return 'The field isn\'t exist in this form'
  }

  /**
   * @desc 校验整个表单，更新表单实例属性：valid, pristine, errorText, data, items
   * @param validateAll   是否校验所有表单项
   *                      true - 校验所有表单项
   *                      false - 当遇到第一个校验错误的表单项时，停止对其他表单项的校验
   *
   *                      默认值: this.options.validateAll
   *
   * @desc Form validate, update the value of properties: valid, pristine, errorText, data, items
   * @param validateAll   Whether validate all the form item in the form
   *                      true - validate all
   *                      false - stop validate other form items when the first form item with a validation error is encountered
   *
   *                      Default: this.options.validateAll
   *
   * @return ErrorText
   * */
  formValidate(validateAll = this.options.validateAll): ErrorText {
    let errorTxt = ''

    for (let i = 0; i < this.items.length; i += 1) {
      if (!validateAll && errorTxt) break
      const err = itemValidate(this.items[i], this.options)
      if (!errorTxt) errorTxt = err
    }

    return errorTxt
  }

  /**
   * @desc 在提交之前会先做一次表单校验（运行 formValidate）
   *
   * @desc Method formValidate will be called before run the onSubmit function in this method
   * */
  submit(): Promise<ReturnTypeOfSubmit | FormDataType> {
    const errorText = this.formValidate()
    if (!errorText) {
      return this.options.onSubmit(this.data)
    }
    return Promise.reject(new Error(errorText))
  }

  /**
   * @desc 重置表单
   *
   * @desc Reset form
   *
   * @param values             Default: this.options.initialValues
   * */
  reset(values: FormDataType = this.options.initialValues): void {
    this.updateOptions({ initialValues: values })
    this.items = init(this.items, this.options)
  }

  /**
   * @desc 用参数 value 的值重置与参数 field 对应的表单项
   *
   * @desc Reset form item that matched the param field with the param value
   *
   * @param field
   * @param value              Default: this.options.initialValues[field]
   * */
  resetItem(
    field: TupleToUnion<FormItems, 'field'>,
    value: TupleToUnion<FormItems, 'value'> = this.options.initialValues[field],
  ): void {
    const item = this.getItemByField(field)
    if (item) {
      item.pristine = true
      item.value = item.formatter
        ? item.formatter(value, this.options.optionsForValidatorAndFormatter)
        : value
      clearValidateRes(item)
    } else console.error("Form: The field isn't exist in this form")
  }

  /**
   * @desc 清除表单/表单项的校验结果
   *
   * @desc Clear the validate result of the form or the form item that matched the param field
   *
   * @param [field]            If `!!field === true`, it will clear the validate result of the form item that matched the param field
   *                           else, if will clear the validate result of the form
   * */
  clearValidateResult(field?: TupleToUnion<FormItems, 'field'>): void {
    if (field) {
      const item = this.getItemByField(field)
      if (item) {
        clearValidateRes(item)
      } else console.error("Form: The field isn't exist in this form")
    } else {
      this.items.forEach(clearValidateRes)
    }
  }

  updateOptions(
    options: FormOptions<FormDataType, ReturnTypeOfSubmit | FormDataType>,
  ) {
    this.options.onSubmit =
      options.onSubmit ||
      this.options.onSubmit ||
      ((data: FormDataType) => Promise.resolve(data))
    this.options.validateAll =
      options.validateAll || this.options.validateAll || false
    this.options.initialValues =
      options.initialValues || this.options.initialValues
    this.options.validateOnChange =
      options.validateOnChange || this.options.validateOnChange || false
    this.options.emptyErrorTemplate =
      options.emptyErrorTemplate ||
      this.options.emptyErrorTemplate ||
      '{label}不能为空'
    this.options.optionsForValidatorAndFormatter = {
      ...this.options.optionsForValidatorAndFormatter,
      ...options.optionsForValidatorAndFormatter,
    }
  }
}
